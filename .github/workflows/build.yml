name: Build addon
on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*"
    branches: [master]
  #pull_request:
  #  branches: [ master ]

concurrency:
  group: ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-macos
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{matrix.os}}
    name: ${{matrix.name}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: windows-debug
            os: windows-2019
            name: üèÅ Windows Debug
            target: template_debug
            platform: windows
            arch: x86_64
          # - identifier: windows-release
          #   os: windows-2019
          #   name: üèÅ Windows Release
          #   target: template_release
          #   platform: windows
          #   arch: x86_64
          # - identifier: linux-debug
          #   os: ubuntu-18.04
          #   name: üêß Linux Debug
          #   runner: ubuntu-20.04
          #   target: template_debug
          #   platform: linux
          #   arch: x86_64
          # - identifier: linux-release
          #   os: ubuntu-18.04
          #   name: üêß Linux Release
          #   runner: ubuntu-20.04
          #   target: template_release
          #   platform: linux
          #   arch: x86_64

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Set up Scons
        shell: bash
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          scons --version

      - name: Linux dependencies
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqq build-essential pkg-config

      - name: Setup MinGW for Windows/MinGW build
        if: ${{ matrix.platform == 'windows' }}
        uses: egor-tensin/setup-mingw@v2

      - name: Compile godot-cpp
        shell: sh
        run: |
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}'
        working-directory: godot-cpp

      - name: Compile Extension
        shell: sh
        run: |
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}'

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: delaunator_gdextension
          path: demo

      - name: zip artifacts for release
        run: |
          pushd demo
          zip ../delaunator_gdextension.zip addons/* -r
          popd

      - name: Publish release
        continue-on-error: true # the step will fail if build wasn't triggered by a tag
        uses: softprops/action-gh-release@v1
        with:
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.RELEASE_TOKEN }}
          files: delaunator_gdextension.zip
